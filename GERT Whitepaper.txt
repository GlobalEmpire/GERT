It's pronounced gurt (as in yogurt)
Revision 2.1.0 October 6, 2017

1. Introduction
GERT is described in this document, to help implementations achive compatability and to provide ease of use for developers and users.
The goal of GERT is to be simple but powerful, and at the time of writing is the main Ocranet routing system. GERTe is an inter-server
networking standard built with the goal of making the most from Ocranet, while GERTi is an intra-server networking protocol that focues
on ease-of-use and capabilities useful to programmers.

2. Compatibility.
Any infra-server networking standard can work with GERTe, as long as it is Ocranet+GERTe addressing aware. Any inter-server networking
standard can work with GERTi, as long as it is GERTi addressing aware.

3. Technical Terminology
A. Ocranet: The base networking protocol GERT is built on. To ensure a minimum level of compatibility, this should be used as the inter
server networking standard.
B. Gateway: An OpenComputers computer with an internet card that is responsible from connecting an interior infra-server network to an
external inter-server (preferably Ocranet based) network.
C. GERT: The complete Global Empire Routing Technology package. This includes a network that has both a GERTi network+gateway and a
GERTe gateway. It may also be referred to as GERTc for clarity.
D. GERTe: The Global Empire Routing Technology external implementation. This is solely for communication outside a minecraft, and
handles gateway to gateway communication.
E. GERTi: The Global Empire Routing Technology internal implementation. This is solely for communication inside a minecraft server using
OC equipment.
F. GEDS: Global Empire Domain Server. Translates GERTe addresses to IP addresses and handles TCP networking outside of a minecraft
server
G. End-user: an OC computer that is connected to a gateway.
H. Cell: An Ocranet packet.

4. GERTe operation
  A. Premise
    Global Empire Routing Technology external is designed to provide the routing implementation for Ocranet with maximum flexibility, 
    and minimal routing overhead.
    
  B. Implementation Overview
    GERTe is built on using IPv4 style addresses to allow minecraft servers to communicate with each other. GERTe specifies a way
    to turn those addresses into a real connection. By communicating with a GEDS server at the beginning of a new connection
    with a server, it internally translates the entered address into a real-world IP address for direct communications.
    
  C. Gateway Implementation Details
    Startup Procedure:
    	1. Calls the startup method of the GERTeAPI, which attempts to connect to a peer on the peers.geds file in the same directory as
	the GERTe gateway.
	2. If successful, the gateway must call the register method of the GERTeAPI, providing the GERTe address and private key pair
	provided by the Global Empire.
    
    Data packet received from internal network (e.g. GERTi)
    1. A GERTe gateway receives a data packet with a GERTe address embedded in it.
    2. The GERTe gateway transmits the data packet to the GEDS server it is connected to.
    
    Data packet received from external network (i.e. GERTe)
    1. The GERTe gateway checks for new data packets from the GEDS server.
    2. Upon receipt, the gateway reads the destination information and transmits the packet to the appropriate node on the gateway's
    internal network.
	
  D. GEDS implementation details
    1. Maintain table of "telephone" number and key pairs.
    2. Upon request from a new gateway, receive a address key pair for registration, or is a peer:
      2a. If the gateway sends a valid pair, assign that address to the gateway and proceed to 3.
      2b. If the gateway sends an invalid pair continue at step 2.
	  2c. If the connection is a known peer, continue to step 6.
    3. Transmit to peers the registration of the gateway for routing.
    4. Upon data request, check that the gateway is registered and continue.
      4a. If the destination is connected to this GEDS, replace destination with source and forward to the destination.
      4b. If the destination is connected to a different known GEDS, add the source into the packet and forward to remote GEDS.
	  4c. If the route to the destination is not known or does not exist, respond with an error.
	5. Loop step 4 until connection is closed.
	6. If the peer sends a peer update command:
		6a. If the command adds a peer, add it to the known list.
		6b. If the command removes a peer, remove it from the known list.
	7. If the peer sends a key update command:
		7a. If the command adds a key, add it to the key address pair list.
		7b. If the command removes a key, remove it from the key address pair list.
	8. If a peer sends a registration update command:
		8a. If the command adds a registration, mark it as the remote route for a gateway.
		8b. If the command removes a registration, remove it from the remote routes.
	9. If a peer sends a data route packet, transmit it to the registered gateway.
	10. Loop to step 6.
  
  E. GERTi integration details
    1. GERTi makes use of an 8-digit extension code to a GERTe address, so monitor all incoming packets for the extension and forward to
    the appropriate node.
    
5. GERTi Operation
  A. Premise
    GERTi provides a simple, distributed, powerful, network for OC computers inside of a minecraft server. GERTi handles the networking
    of OC computers to each other, and when enabled by an appropriate protocol (e.g. GERTe) can connect to computers outside of a
    minecraft server.
    
  B. Implementation overview
    Upon startup, a GERTi enabled computer will use all available communication channels to attempt to reach a gateway through up to 2
    intermediate computers. This currently allows for around 16 million clients on any GERTi network.
    
  C. Implementation details
    Startup:
    1. Upon startup, a GERTi enabled computer checks for tunnel cards and wired/wireless network cards.
    2. If it has a linked card, attempt to check for a GERTi computer on the other end by transmitting "AddNeighbor".
    3. If it has a wired/wireless card, do a broadcast on port 4378 with the message "AddNeighbor" to look for GERTi enabled computers.
    4. Listen for "RETURNSTART" from neighboring computers.
    5. Set this computer's tier to that of the lowest GERTi channel number's tier plus 1.
    6. Engage listener so that other computers that send out broadcasts can connect through this computer.
      6a. On startup message reception, reply with computer Tier number, network card UUID, if this computer is tier 0/1/2.
    7. Forward local database connections up through chain to gateway.
    
    Communication
    1. Upon inter-server communication requests from within the computer, attempt to connect to gateway, either directly, or through the
    highest ranked parent node.
      1a. If gateway acknowledges connection, forward data through it, and out of the network.
      1b. If gateway does not respond, report an error.
    2. Upon inter-server communication request from a child node, follow step 1.
    3. Upon infra-server communication request from within the computer, attempt to lookup target network card UUID in local database.
      3a. If UUID is found, transmit directly, skip rest of 3.
      3b. If UUID is not found, request parent node to look up UUID in its local database.
      3c. If parent does not respond, report error.
    4. Upon infra-server communication request from a child node, attempt to lookup target network card UUID in local database.
      4a. If UUID is found, attempt to open connection to network card, and notify child of success.
      4b. If UUID is not found, request parent node to look up UUID in its local database.
      4c. If parent does not respond, report error.
   D. GERTi Gateway operation
    Startup:
    1. Register event listener to listen for new clients.
    2. Attempt to connect to external routing protocol (GERTe preferred, but not necessary)
    3. Collect and organize routing table and paths to every child node.
    
    Communication:
    1. Upon infra-server communication request from a child node, look up most efficient (fewest hops) path to requested node.
      1a. If path found and verified, route communication to destination
      1b. If no paths found, report error.
    2. Upon inter-server communication request from a child node, prepare Ocranet cell for transmission to external routing protocol.
	2a. If external protocol not available, send FAIL cell.
